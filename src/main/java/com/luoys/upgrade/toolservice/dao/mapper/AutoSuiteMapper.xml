<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luoys.upgrade.toolservice.dao.AutoSuiteMapper">
  <resultMap id="BaseResultMap" type="com.luoys.upgrade.toolservice.dao.po.AutoSuitePO">
    <id column="id" jdbcType="INTEGER" property="id" />
<!--    <result column="suite_id" jdbcType="VARCHAR" property="suiteId" />-->
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="slave_type" jdbcType="TINYINT" property="slaveType" />
    <result column="status" jdbcType="TINYINT" property="status" />
<!--    <result column="resource" jdbcType="VARCHAR" property="resource" />-->
<!--    <result column="parameter" jdbcType="VARCHAR" property="parameter" />-->
    <result column="time_out" jdbcType="INTEGER" property="timeOut" />
    <result column="case_time_out" jdbcType="INTEGER" property="caseTimeOut" />
    <result column="total" jdbcType="INTEGER" property="total" />
    <result column="passed" jdbcType="INTEGER" property="passed" />
    <result column="failed" jdbcType="INTEGER" property="failed" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="owner_id" jdbcType="INTEGER" property="ownerId" />
<!--    <result column="owner_name" jdbcType="VARCHAR" property="ownerName" />-->
<!--    <result column="is_api_completed" jdbcType="TINYINT" property="isApiCompleted" />-->
<!--    <result column="is_ui_completed" jdbcType="TINYINT" property="isUiCompleted" />-->
  </resultMap>
  <sql id="Base_Column_List">
    id, `name`, description, slave_type, `status`, time_out, case_time_out, total,
    passed, failed, project_id, owner_id
  </sql>
  <select id="selectById" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from auto_suite
    where id = #{suiteId,jdbcType=INTEGER}
  </select>
  <select id="list" resultMap="BaseResultMap" parameterType="com.luoys.upgrade.toolservice.dao.po.AutoSuiteQueryPO">
    select
    <include refid="Base_Column_List" />
    from auto_suite
    where is_delete = 0
    <if test="projectId != null">
      and project_id = #{projectId,jdbcType=INTEGER}
    </if>
<!--    <if test="ownerId != null">-->
<!--      and owner_id = #{ownerId,jdbcType=INTEGER}-->
<!--    </if>-->
    <if test="name != null">
      and `name` like concat('%', #{name,jdbcType=VARCHAR}, '%')
    </if>
    order by gmt_create desc limit ${startIndex}, 10
  </select>
  <select id="count" resultType="java.lang.Integer" parameterType="com.luoys.upgrade.toolservice.dao.po.AutoSuiteQueryPO">
    select count(1)
    from auto_suite
    where is_delete = 0
    <if test="projectId != null">
      and project_id = #{projectId,jdbcType=INTEGER}
    </if>
    <if test="ownerId != null">
      and owner_id = #{ownerId,jdbcType=INTEGER}
    </if>
    <if test="name != null">
      and `name` like concat('%', #{name,jdbcType=VARCHAR}, '%')
    </if>
  </select>
  <update id="remove">
    update auto_suite
    set is_delete = 1, gmt_modified = now()
    where id = #{suiteId,jdbcType=INTEGER}
  </update>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.luoys.upgrade.toolservice.dao.po.AutoSuitePO" useGeneratedKeys="true">
    insert into auto_suite (`name`, description, slave_type, `status`,
      time_out, case_time_out,
      total, passed, failed, project_id,
      owner_id, is_delete,
      gmt_create, gmt_modified)
    values (#{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{slaveType,jdbcType=TINYINT}, #{status,jdbcType=TINYINT},
      #{timeOut,jdbcType=INTEGER}, #{caseTimeOut,jdbcType=INTEGER},
      #{total,jdbcType=INTEGER}, #{passed,jdbcType=INTEGER}, #{failed,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER},
      #{ownerId,jdbcType=INTEGER}, 0, now(), now())
  </insert>
  <update id="update" parameterType="com.luoys.upgrade.toolservice.dao.po.AutoSuitePO">
    update auto_suite
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="slaveType != null">
        slave_type = #{slaveType,jdbcType=TINYINT},
      </if>
      <if test="timeOut != null">
        time_out = #{timeOut,jdbcType=INTEGER},
      </if>
      <if test="caseTimeOut != null">
        case_time_out = #{caseTimeOut,jdbcType=INTEGER},
      </if>
      <if test="total != null">
        total = #{total,jdbcType=INTEGER},
      </if>
<!--      <if test="passed != null">-->
<!--        passed = #{passed,jdbcType=INTEGER},-->
<!--      </if>-->
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="ownerId != null">
        owner_id = #{ownerId,jdbcType=INTEGER},
      </if>
<!--      <if test="ownerName != null">-->
<!--        owner_name = #{ownerName,jdbcType=VARCHAR},-->
<!--      </if>-->
      gmt_modified = now()
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateResult">
    update auto_suite
    set passed = #{passed,jdbcType=INTEGER}, failed = #{failed,jdbcType=INTEGER}
    where id = #{suiteId,jdbcType=INTEGER}
  </update>
  <update id="updateStatus">
    update auto_suite
    set status = #{status,jdbcType=TINYINT}
    where id = #{suiteId,jdbcType=INTEGER}
  </update>
  <update id="updateTotal">
    update auto_suite
    set total = #{total,jdbcType=INTEGER}
    where id = #{suiteId,jdbcType=INTEGER}
  </update>
<!--  <update id="updateExecuteStatus">-->
<!--    update auto_suite-->
<!--    <set>-->
<!--      <if test="isApiCompleted != null">-->
<!--        is_api_completed = #{isApiCompleted,jdbcType=TINYINT},-->
<!--      </if>-->
<!--      <if test="isUiCompleted != null">-->
<!--        is_ui_completed = #{isUiCompleted,jdbcType=TINYINT},-->
<!--      </if>-->
<!--      gmt_modified = now()-->
<!--    </set>-->
<!--    where id = #{suiteId,jdbcType=INTEGER}-->
<!--  </update>-->
</mapper>
